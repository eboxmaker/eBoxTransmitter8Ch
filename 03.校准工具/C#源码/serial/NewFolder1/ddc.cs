using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;



namespace serial
{

    class DdcFrame
    {
        public const UInt16 DDC_MAX_PAYLOAD_LENGTH = 128;
        public byte[] head = new byte[2];
        public UInt16 id ;
        public byte ch ;
        public byte ack;
        public UInt16 payLen;
        public byte[] pay = new byte[DDC_MAX_PAYLOAD_LENGTH];
        public UInt16 crc;

        public byte[] frameToBuf(UInt16 len )
        {
            byte[] temp = new byte[len + 10];
            int i = 0;
            temp[i++] = head[0];
            temp[i++] = head[1];
            temp[i++] = BitConverter.GetBytes(id)[0];
            temp[i++] = BitConverter.GetBytes(id)[1];
            temp[i++] = ch;
            temp[i++] = ack;
            temp[i++] = BitConverter.GetBytes(payLen)[0];
            temp[i++] = BitConverter.GetBytes(payLen)[1];
            for(int j = 0; j < len; j++)
                temp[i++] = pay[j];
            temp[i++] = BitConverter.GetBytes(crc)[0];
            temp[i++] = BitConverter.GetBytes(crc)[1];
                
            return temp;
        }
        byte[] aucCRCHi = new byte[] {   
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
            0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
            0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
            0x00, 0xC1, 0x81, 0x40
        };
        byte[] aucCRCLo = new byte[] {   
            0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
            0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
            0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
            0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
            0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
            0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
            0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
            0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 
            0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
            0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
            0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
            0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
            0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 
            0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
            0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
            0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
            0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
            0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
            0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
            0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
            0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
            0x41, 0x81, 0x80, 0x40 
        };

        public UInt16 crc16(byte[] pucFrame, int usLen)
        {
                byte ucCRCHi = 0xFF;
                byte ucCRCLo = 0xFF;
                int iIndex = 0;
                int i = 0;
                while (usLen-- > 0)
                {
                    iIndex = ucCRCLo ^ (pucFrame[i++]);
                    ucCRCLo = (byte)(ucCRCHi ^ aucCRCHi[iIndex]);
                    ucCRCHi = aucCRCLo[iIndex];
                }
                return (UInt16)(ucCRCHi << 8 | ucCRCLo);
        }
    }

    class DDC
    {

        public bool flag = false;
        private const int DDC_HEAD =  0;
        private const int DDC_ID =  1;
        private const int DDC_CH =  2;
        private const int DDC_ACK =  3;
        private const int DDC_LEN =  4;
        private const int DDC_PAYLOAD =  5;
        private const int DDC_CRC =  6;


        public const int DDC_NoAck =  0;
        public const int DDC_Ack =  1;
        public UInt16 id = 0;


        private  int recv_state = 0;

        Queue fifo = new Queue();
        public DdcFrame rFrame = new DdcFrame();

        byte[] head = new byte[2];

        byte[] temp = new byte[256];
        int counter = 0;

        public void recvProcess(byte c)
        {

            switch (recv_state)
            {
                case DDC_HEAD:
                    flag = false;
                    head[0] = head[1];
                    head[1] = c;
                    if ((head[0] == 0x55) && (head[1] == 0xaa))
                    {
                        rFrame.head[0] = head[0];
                        rFrame.head[1] = head[1];
                        recv_state = DDC_ID;
                    }
                    break;
                case DDC_ID:
                    temp[counter++] = c;
                    if(counter == 2)
                    {
                        rFrame.id = BitConverter.ToUInt16(temp,0);
                        recv_state = DDC_CH;
                        counter = 0;
                    }
                    break;
                case DDC_CH:
                    rFrame.ch = c;
                    recv_state = DDC_ACK;
                    break;
                case DDC_ACK:
                    rFrame.ack = c;
                    recv_state = DDC_LEN;
                    break;
                case DDC_LEN:
                    temp[counter++] = c;
                    if(counter == 2)
                    {
                        rFrame.payLen = BitConverter.ToUInt16(temp, 0);
                        if(rFrame.payLen <= 128)
                        {
                            recv_state = DDC_PAYLOAD; 
                        }
                        else
                        {
                            recv_state = DDC_HEAD;
                        }
                        counter = 0;
                    }
                    break;
                case DDC_PAYLOAD:
                    rFrame.pay[counter++] = c;
                    if (counter == rFrame.payLen)
                    {
                        recv_state = DDC_CRC;
                        counter = 0;
                    }
                    break;
                case DDC_CRC:
                    temp[counter++] = c;
                    if(counter == 2)
                    {
                        rFrame.crc = BitConverter.ToUInt16(temp,0);
                        temp = rFrame.frameToBuf(rFrame.payLen);
                        if (rFrame.crc16(temp,(rFrame.payLen + 8)) == rFrame.crc)//crc ok
                        {
                            flag = true;
                            //ddc_analyze_frame(&recv_frame);
                        
                        }
                        else
                        {
                            flag = false;
                            #if DDC_DEBUG
                            ebox_printf("\r\ncrc = 0x%04x \r\n",recv_frame.crc.value);
                            ebox_printf("\r\ncrc = 0x%04x \r\n",crc16(buf,recv_frame.payload_len.value + 8));
                            #endif
                        }
                        recv_state = DDC_HEAD;
                        counter = 0;

                    }
                    break;
            }
        }

        public byte[] makeFrame(byte[] data,UInt16 len,byte ack,byte ch)
        {
            byte[] temp = new byte[len + 10];
            UInt16 crc;
            temp[0] = 0x55;
            temp[1] = 0xaa;
            BitConverter.GetBytes(id).CopyTo(temp,2);
            temp[4] = ch;
            temp[5] = ack;
            BitConverter.GetBytes(len).CopyTo(temp,6);
            data.CopyTo(temp, 8);
            crc = rFrame.crc16(temp,(len + 8));
            BitConverter.GetBytes(crc).CopyTo(temp,len + 8);
            return temp;
        }


        private UInt16 getID()
        { 
            id++;
            return id;
        }



    }
}
